{"version":3,"sources":["components/webtoon_container.tsx","App.tsx","modules/base_modules.ts","reportWebVitals.ts","index.tsx"],"names":["View_a_webtoon","href","this","props","url","className","style","fontSize","listStyle","textAlign","color","service","marginLeft","state","title","artist","src","img","React","Component","today_weeknum","Date","getDay","view_count","webtoon_data","xmlhttp","XMLHttpRequest","json_data","onreadystatechange","readyState","status","JSON","parse","responseText","err","console","log","message","open","send","get_json_data","filtering_data","filter","element","weekday","App","document","querySelector","innerText","useState","target_data","change_target_data","a_webtoon","map","index","search_txt","change_search_txt","view_webtoon_count","change_view_webtoon_count","Webtoon_area","view_webtoon","slice","View_more_webtoon","onClick","Filter_option","num","filter_num","onScroll","type","value","onChange","e","input_txt","target","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3a5d3a1c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport type { A_webtoon_info } from \"../modules/base_modules\";\r\n\r\nclass View_a_webtoon extends React.Component<A_webtoon_info> {\r\n  render() {\r\n    return (\r\n      <a href={this.props.url}>\r\n        <li className=\"webtoon_container\">\r\n          <div className=\"webtoon_info\">\r\n            <ul className=\"webtoon_info_container\">\r\n              <li\r\n                style={{\r\n                  fontSize: \"10px\",\r\n                  listStyle: \"none\",\r\n                  textAlign: \"right\",\r\n                  color: \"white\",\r\n                }}\r\n              >\r\n                <span>{this.props.service}</span>\r\n                <span style={{ marginLeft: \"2px\" }}>{this.props.state}</span>\r\n              </li>\r\n              <li style={{ fontSize: \"10px\", listStyle: \"none\" }}>{this.props.title}</li>\r\n              <li style={{ fontSize: \"8px\", listStyle: \"none\" }}>{this.props.artist}</li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"thumnail\">\r\n            <img src={this.props.img} className=\"thumnail_img\" />\r\n          </div>\r\n        </li>\r\n      </a>\r\n    );\r\n  }\r\n}\r\n\r\nexport default View_a_webtoon;\r\n","import View_a_webtoon from \"./components/webtoon_container\";\nimport { render } from \"@testing-library/react\";\nimport React, { useState, useEffect } from \"react\";\nimport type { A_webtoon_info } from \"./modules/base_modules\";\nimport { get_json_data } from \"./modules/base_modules\";\nimport \"./App.css\";\nconst webtoon_api_url = \"https://toy-projects-api.herokuapp.com/webtoon/all\";\nvar today_weeknum = new Date().getDay();\nlet view_count = 9;\n\n/*const useTitle = (initialTitle: any) => {\n  const [title, setTitle] = useState(initialTitle);\n  const updateTitle = () => {\n    const htmlTitle: any = document.querySelector(\"title\");\n    htmlTitle.innerText = title;\n  };\n  useEffect(updateTitle, [title]);\n  return setTitle;\n};\n const titleUpdater = useTitle(\"Loading...\");\nsetTimeout(() => titleUpdater(\"Home\"), 1000);*/\n\nlet webtoon_data: A_webtoon_info[] = get_json_data(webtoon_api_url);\nlet filtering_data: A_webtoon_info[] = webtoon_data.filter(function (element: A_webtoon_info) {\n  return element.weekday == today_weeknum;\n});\n\nfunction App() {\n  const htmlTitle: any = document.querySelector(\"title\");\n  htmlTitle.innerText = \"WEBTOON HUB\";\n  const [target_data, change_target_data] = useState(filtering_data);\n  const webtoon_view_rendering = () => {};\n  const a_webtoon: JSX.Element[] = target_data.map((target_data, index: number) => (\n    <View_a_webtoon\n      key={index}\n      title={target_data.title}\n      url={target_data.url}\n      img={target_data.img}\n      artist={target_data.artist}\n      service={target_data.service}\n      state={target_data.state}\n      weekday={target_data.weekday}\n    ></View_a_webtoon>\n  ));\n\n  //검색 기능\n  const [search_txt, change_search_txt] = useState(\"\");\n  const set_search_txt = (e: any) => {\n    change_search_txt(e.target.value);\n    if (e.target.value == \"\") {\n      change_target_data(filtering_data);\n    } else {\n      change_target_data(search_data(e.target.value));\n    }\n  };\n  const [view_webtoon_count, change_view_webtoon_count] = useState(9);\n  const Webtoon_area = () => {\n    let view_webtoon = a_webtoon.slice(0, view_webtoon_count);\n    return <ul className=\"content_area\">{view_webtoon}</ul>;\n  };\n\n  const View_more_webtoon = () => {\n    return (\n      <a\n        onClick={() => {\n          view_count = view_count + 9;\n          change_view_webtoon_count(view_count);\n        }}\n      >\n        more\n      </a>\n    );\n  };\n  function Filter_option(props: any) {\n    return (\n      <li\n        onClick={() => {\n          view_count = 9;\n          change_view_webtoon_count(view_count);\n          change_target_data(filter_data(props.filter_num));\n        }}\n        className=\"filter_option\"\n      >\n        <a>{props.weekday}</a>\n      </li>\n    );\n  }\n\n  return (\n    <div\n      className=\"body\"\n      onScroll={() => {\n        view_count = view_count + 9;\n        change_view_webtoon_count(view_count);\n      }}\n    >\n      <div className=\"top_bar\">\n        <input type={\"text\"} value={search_txt} className=\"top_bar_search_box\" onChange={set_search_txt} />\n        <span className=\"top_bar_item\">/ SEARCH</span>\n      </div>\n      <ul className=\"filter_container\">\n        <Filter_option filter_num=\"1\" weekday=\"월\" />\n        <Filter_option filter_num=\"2\" weekday=\"화\" />\n        <Filter_option filter_num=\"3\" weekday=\"수\" />\n        <Filter_option filter_num=\"4\" weekday=\"목\" />\n        <Filter_option filter_num=\"5\" weekday=\"금\" />\n        <Filter_option filter_num=\"6\" weekday=\"토\" />\n        <Filter_option filter_num=\"0\" weekday=\"일\" />\n        <Filter_option filter_num=\"7\" weekday=\"완결\" />\n      </ul>\n      <Webtoon_area />\n      <View_more_webtoon />\n    </div>\n  );\n}\n\nfunction filter_data(num: number) {\n  var change_target_data = webtoon_data.filter(function (element: A_webtoon_info) {\n    return element.weekday == num;\n  });\n  return change_target_data;\n}\n\nfunction search_data(input_txt: string) {\n  var change_target_data = webtoon_data.filter(function (element: A_webtoon_info) {\n    return element.title.includes(input_txt) || element.artist.includes(input_txt);\n  });\n  return change_target_data;\n}\n\nexport default App;\n","interface A_webtoon_info {\r\n  title: string;\r\n  artist: string;\r\n  url: string;\r\n  img: string;\r\n  service: string;\r\n  state: string;\r\n  weekday: number;\r\n}\r\n\r\nconst get_json_data = (url: string) => {\r\n  let xmlhttp = new XMLHttpRequest();\r\n  let json_data: A_webtoon_info[] = [];\r\n  xmlhttp.onreadystatechange = () => {\r\n    if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\r\n      try {\r\n        json_data = JSON.parse(xmlhttp.responseText);\r\n      } catch (err) {\r\n        console.log(err.message + \" in \" + xmlhttp.responseText);\r\n        return;\r\n      }\r\n    }\r\n  };\r\n  xmlhttp.open(\"GET\", url, false); //true는 비동기식, false는 동기식 true로 할시 변수 변경전에 웹페이지가 떠버림\r\n  xmlhttp.send();\r\n  return json_data;\r\n};\r\n\r\nexport type { A_webtoon_info };\r\nexport { get_json_data };\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}